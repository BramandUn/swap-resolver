// Code generated by protoc-gen-go. DO NOT EDIT.
// source: swap_resolver.proto

/*
Package swapresolver is a generated protocol buffer package.

It is generated from these files:
	swap_resolver.proto

It has these top-level messages:
	ResolveRequest
	ResolveResponse
*/
package swapresolver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResolveRequest struct {
	Hash      string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Timeout   uint32 `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
	Heightnow uint32 `protobuf:"varint,3,opt,name=heightnow" json:"heightnow,omitempty"`
	Amount    int64  `protobuf:"varint,4,opt,name=Amount" json:"Amount,omitempty"`
}

func (m *ResolveRequest) Reset()                    { *m = ResolveRequest{} }
func (m *ResolveRequest) String() string            { return proto.CompactTextString(m) }
func (*ResolveRequest) ProtoMessage()               {}
func (*ResolveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ResolveRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ResolveRequest) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ResolveRequest) GetHeightnow() uint32 {
	if m != nil {
		return m.Heightnow
	}
	return 0
}

func (m *ResolveRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ResolveResponse struct {
	Preimage string `protobuf:"bytes,1,opt,name=preimage" json:"preimage,omitempty"`
}

func (m *ResolveResponse) Reset()                    { *m = ResolveResponse{} }
func (m *ResolveResponse) String() string            { return proto.CompactTextString(m) }
func (*ResolveResponse) ProtoMessage()               {}
func (*ResolveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResolveResponse) GetPreimage() string {
	if m != nil {
		return m.Preimage
	}
	return ""
}

func init() {
	proto.RegisterType((*ResolveRequest)(nil), "swapresolver.ResolveRequest")
	proto.RegisterType((*ResolveResponse)(nil), "swapresolver.ResolveResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SwapResolver service

type SwapResolverClient interface {
	// ResolveHash is used by LND to request translation of Rhash to a pre-image.
	// the resolver may return the preimage and error indicating that there is no
	// such hash/deal
	ResolveHash(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
}

type swapResolverClient struct {
	cc *grpc.ClientConn
}

func NewSwapResolverClient(cc *grpc.ClientConn) SwapResolverClient {
	return &swapResolverClient{cc}
}

func (c *swapResolverClient) ResolveHash(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := grpc.Invoke(ctx, "/swapresolver.SwapResolver/ResolveHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SwapResolver service

type SwapResolverServer interface {
	// ResolveHash is used by LND to request translation of Rhash to a pre-image.
	// the resolver may return the preimage and error indicating that there is no
	// such hash/deal
	ResolveHash(context.Context, *ResolveRequest) (*ResolveResponse, error)
}

func RegisterSwapResolverServer(s *grpc.Server, srv SwapResolverServer) {
	s.RegisterService(&_SwapResolver_serviceDesc, srv)
}

func _SwapResolver_ResolveHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapResolverServer).ResolveHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swapresolver.SwapResolver/ResolveHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapResolverServer).ResolveHash(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SwapResolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swapresolver.SwapResolver",
	HandlerType: (*SwapResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveHash",
			Handler:    _SwapResolver_ResolveHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swap_resolver.proto",
}

func init() { proto.RegisterFile("swap_resolver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x2e, 0x4f, 0x2c,
	0x88, 0x2f, 0x4a, 0x2d, 0xce, 0xcf, 0x29, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x01, 0x09, 0xc2, 0xc4, 0x94, 0x4a, 0xb8, 0xf8, 0x82, 0x20, 0xec, 0xa0, 0xd4, 0xc2, 0xd2,
	0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0x8c, 0xc4, 0xe2, 0x0c, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0xce, 0x20, 0x30, 0x5b, 0x48, 0x82, 0x8b, 0xbd, 0x24, 0x33, 0x37, 0x35, 0xbf, 0xb4, 0x44, 0x82,
	0x49, 0x81, 0x51, 0x83, 0x37, 0x08, 0xc6, 0x15, 0x92, 0xe1, 0xe2, 0xcc, 0x48, 0xcd, 0x4c, 0xcf,
	0x28, 0xc9, 0xcb, 0x2f, 0x97, 0x60, 0x06, 0xcb, 0x21, 0x04, 0x84, 0xc4, 0xb8, 0xd8, 0x1c, 0x73,
	0xf3, 0x4b, 0xf3, 0x4a, 0x24, 0x58, 0x14, 0x18, 0x35, 0x98, 0x83, 0xa0, 0x3c, 0x25, 0x5d, 0x2e,
	0x7e, 0xb8, 0xad, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x52, 0x5c, 0x1c, 0x05, 0x45, 0xa9,
	0x99, 0xb9, 0x89, 0xe9, 0xa9, 0x50, 0xab, 0xe1, 0x7c, 0xa3, 0x18, 0x2e, 0x9e, 0xe0, 0xf2, 0xc4,
	0x02, 0xa8, 0x96, 0x22, 0x21, 0x1f, 0x2e, 0x6e, 0x28, 0xdb, 0x03, 0xe4, 0x3a, 0x19, 0x3d, 0x64,
	0x2f, 0xe9, 0xa1, 0xfa, 0x47, 0x4a, 0x16, 0x87, 0x2c, 0xc4, 0x5e, 0x25, 0x86, 0x24, 0x36, 0x70,
	0xb8, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x4a, 0x0f, 0xfe, 0x2e, 0x01, 0x00, 0x00,
}
